{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n\n// const TeacherDashboard = () => {\n//   const [students, setStudents] = useState([]);\n//   const [classes, setClasses] = useState([]);\n//   const [learningMaterials, setLearningMaterials] = useState([]);\n//   const [notifications, setNotifications] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [materialTitle, setMaterialTitle] = useState(\"\");\n\n//   // Fetch all students or by class ID\n//   const getStudents = async (classId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         `https://seclink-server.onrender.com/students?class_id=${\n//           classId || \"\"\n//         }`,\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setStudents(data);\n//       } else {\n//         console.error(\"Error fetching students:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching students:\", error);\n//     }\n//   };\n\n//   // Fetch all classes\n//   const getClasses = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/classes\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setClasses(data);\n//       } else {\n//         console.error(\"Error fetching classes:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching classes:\", error);\n//     }\n//   };\n\n//   // Fetch learning materials\n//   const getLearningMaterials = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/learning-material\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setLearningMaterials(data);\n//       } else {\n//         console.error(\"Error fetching learning materials:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching learning materials:\", error);\n//     }\n//   };\n\n//   // Fetch notifications\n//   const getNotifications = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/notifications\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setNotifications(data);\n//       } else {\n//         console.error(\"Error fetching notifications:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching notifications:\", error);\n//     }\n//   };\n\n//   // Upload learning material\n//   const uploadLearningMaterial = async (event) => {\n//     event.preventDefault();\n//     if (!selectedFile || !materialTitle) {\n//       alert(\"Please fill in all fields.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     formData.append(\"title\", materialTitle);\n\n//     console.log(\"Form Data:\", formData); // Debug the FormData object\n\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/learning-material\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//             // Do not add 'Content-Type' header for FormData. The browser sets this automatically.\n//           },\n//           body: formData,\n//         }\n//       );\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         console.log(\"Learning material uploaded successfully\", data);\n//         getLearningMaterials(); // Refresh learning materials\n//       } else {\n//         console.error(\"Error uploading learning material:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error uploading learning material:\", error);\n//     }\n//   };\n\n//   // Handle file input change\n//   const handleFileChange = (event) => {\n//     setSelectedFile(event.target.files[0]);\n//   };\n\n//   useEffect(() => {\n//     getStudents();\n//     getClasses();\n//     getLearningMaterials();\n//     getNotifications();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Teacher Dashboard</h1>\n\n//       <div id=\"students\">\n//         <h2>Students</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Name</th>\n//               <th>Class</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {students.map((student) => (\n//               <tr key={student.id}>\n//                 <td>{student.id}</td>\n//                 <td>{student.name}</td>\n//                 <td>{student.class}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div id=\"classes\">\n//         <h2>Classes</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Name</th>\n//               <th>Teacher</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {classes.map((classItem) => (\n//               <tr key={classItem.id}>\n//                 <td>{classItem.id}</td>\n//                 <td>{classItem.name}</td>\n//                 <td>{classItem.teacher}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div id=\"learningMaterials\">\n//         <h2>Learning Materials</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Title</th>\n//               <th>File Path</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {learningMaterials.map((material) => (\n//               <tr key={material.id}>\n//                 <td>{material.id}</td>\n//                 <td>{material.title}</td>\n//                 <td>{material.file_path}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n\n//         {/* Upload new learning material */}\n//         <h3>Upload New Learning Material</h3>\n//         <form onSubmit={uploadLearningMaterial}>\n//           <label>\n//             Title:\n//             <input\n//               type=\"text\"\n//               value={materialTitle}\n//               onChange={(e) => setMaterialTitle(e.target.value)}\n//               required\n//             />\n//           </label>\n//           <label>\n//             Select File:\n//             <input type=\"file\" onChange={handleFileChange} required />\n//           </label>\n//           <button type=\"submit\">Upload</button>\n//         </form>\n//       </div>\n\n//       <div id=\"notifications\">\n//         <h2>Notifications</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Message</th>\n//               <th>Date</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {notifications.map((notification) => (\n//               <tr key={notification.id}>\n//                 <td>{notification.id}</td>\n//                 <td>{notification.message}</td>\n//                 <td>{notification.date}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TeacherDashboard;","map":{"version":3,"names":[],"sources":["/home/keneddy/development/code/phase4/SecLink-Ke/seclinkkenya/client/src/components/TeacherDashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const TeacherDashboard = () => {\n//   const [students, setStudents] = useState([]);\n//   const [classes, setClasses] = useState([]);\n//   const [learningMaterials, setLearningMaterials] = useState([]);\n//   const [notifications, setNotifications] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [materialTitle, setMaterialTitle] = useState(\"\");\n\n//   // Fetch all students or by class ID\n//   const getStudents = async (classId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         `https://seclink-server.onrender.com/students?class_id=${\n//           classId || \"\"\n//         }`,\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setStudents(data);\n//       } else {\n//         console.error(\"Error fetching students:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching students:\", error);\n//     }\n//   };\n\n//   // Fetch all classes\n//   const getClasses = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/classes\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setClasses(data);\n//       } else {\n//         console.error(\"Error fetching classes:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching classes:\", error);\n//     }\n//   };\n\n//   // Fetch learning materials\n//   const getLearningMaterials = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/learning-material\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setLearningMaterials(data);\n//       } else {\n//         console.error(\"Error fetching learning materials:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching learning materials:\", error);\n//     }\n//   };\n\n//   // Fetch notifications\n//   const getNotifications = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/notifications\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n//       if (response.ok) {\n//         setNotifications(data);\n//       } else {\n//         console.error(\"Error fetching notifications:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching notifications:\", error);\n//     }\n//   };\n\n//   // Upload learning material\n//   const uploadLearningMaterial = async (event) => {\n//     event.preventDefault();\n//     if (!selectedFile || !materialTitle) {\n//       alert(\"Please fill in all fields.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     formData.append(\"title\", materialTitle);\n\n//     console.log(\"Form Data:\", formData); // Debug the FormData object\n\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"https://seclink-server.onrender.com/learning-material\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//             // Do not add 'Content-Type' header for FormData. The browser sets this automatically.\n//           },\n//           body: formData,\n//         }\n//       );\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         console.log(\"Learning material uploaded successfully\", data);\n//         getLearningMaterials(); // Refresh learning materials\n//       } else {\n//         console.error(\"Error uploading learning material:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error uploading learning material:\", error);\n//     }\n//   };\n\n//   // Handle file input change\n//   const handleFileChange = (event) => {\n//     setSelectedFile(event.target.files[0]);\n//   };\n\n//   useEffect(() => {\n//     getStudents();\n//     getClasses();\n//     getLearningMaterials();\n//     getNotifications();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Teacher Dashboard</h1>\n\n//       <div id=\"students\">\n//         <h2>Students</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Name</th>\n//               <th>Class</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {students.map((student) => (\n//               <tr key={student.id}>\n//                 <td>{student.id}</td>\n//                 <td>{student.name}</td>\n//                 <td>{student.class}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div id=\"classes\">\n//         <h2>Classes</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Name</th>\n//               <th>Teacher</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {classes.map((classItem) => (\n//               <tr key={classItem.id}>\n//                 <td>{classItem.id}</td>\n//                 <td>{classItem.name}</td>\n//                 <td>{classItem.teacher}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div id=\"learningMaterials\">\n//         <h2>Learning Materials</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Title</th>\n//               <th>File Path</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {learningMaterials.map((material) => (\n//               <tr key={material.id}>\n//                 <td>{material.id}</td>\n//                 <td>{material.title}</td>\n//                 <td>{material.file_path}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n\n//         {/* Upload new learning material */}\n//         <h3>Upload New Learning Material</h3>\n//         <form onSubmit={uploadLearningMaterial}>\n//           <label>\n//             Title:\n//             <input\n//               type=\"text\"\n//               value={materialTitle}\n//               onChange={(e) => setMaterialTitle(e.target.value)}\n//               required\n//             />\n//           </label>\n//           <label>\n//             Select File:\n//             <input type=\"file\" onChange={handleFileChange} required />\n//           </label>\n//           <button type=\"submit\">Upload</button>\n//         </form>\n//       </div>\n\n//       <div id=\"notifications\">\n//         <h2>Notifications</h2>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>ID</th>\n//               <th>Message</th>\n//               <th>Date</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {notifications.map((notification) => (\n//               <tr key={notification.id}>\n//                 <td>{notification.id}</td>\n//                 <td>{notification.message}</td>\n//                 <td>{notification.date}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TeacherDashboard;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}